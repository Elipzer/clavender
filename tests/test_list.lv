@import list
@import assert
@import test
@using global
@using assert
@using list

def ListVal() => 1 :: 2 :: "hello" :: Vect(1, 2) :: Nil
def VectVal() => Vect(1, 2, "hello", Vect(1, 2))

def flatmapFunc(a) => a :: a :: Nil
def filterFunc(a) => sys:typeof(a) = "string"
def foldFunc(ac, el) => ac + str(el)

def main(args) => test:format(
    assert(ListVal = (1::2::"hello"::Vect(1,2)::Nil), "List"),
    assert(isObject(ListVal), "List isObject"),
    assert(head(ListVal) = 1, "List head"),
    assert(tail(ListVal) = (2::"hello"::Vect(1,2)::Nil), "List tail"),
    assert(len(ListVal) = 4, "List len"),
    assert(str(ListVal) = "[ 1 2 hello [ 1, 2 ] ]", "List str"),
    assert(ListVal toVect = VectVal, "List toVect"),
    assert((ListVal map \str) = ("1"::"2"::"hello"::"[ 1, 2 ]"::Nil), "List map"),
    assert((ListVal flatmap \flatmapFunc) = (1::1::2::2::"hello"::"hello"::Vect(1,2)::Vect(1,2)::Nil), "List flatmap"),
    assert((ListVal filter \filterFunc) = ("hello"::Nil), "List filter"),
    assert((ListVal fold ("", \foldFunc)) = "12hello[ 1, 2 ]", "List fold"),
    assert((ListVal ++ (3::4::Nil)) = (1::2::"hello"::Vect(1,2)::3::4::Nil), "List ++")
    ' TODO: Nil tests
)
